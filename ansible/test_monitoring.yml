- name: Verify services availability
  hosts: monitoring:zimbra
  vars:
    prometheus_port: 9090
    node_exporter_port: 9100
    alertmanager_port: 9093
    grafana_port: 3000
    zimbra_exporter_port: 9095
    stress_test_enabled: false
  tasks:
    - name: Verify monitoring services ports
      ansible.builtin.wait_for:
        port: "{{ item.port }}"
        host: "{{ hostname_mt }}"
        timeout: 5
      loop:
        - { service: 'prometheus', port: "{{ prometheus_port }}" }
        - { service: 'node_exporter', port: "{{ node_exporter_port }}" }
        - { service: 'alertmanager', port: "{{ alertmanager_port }}" }
        - { service: 'grafana', port: "{{ grafana_port }}" }
      register: monitoring_ports_check
      ignore_errors: yes
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Check monitoring metrics endpoints
      ansible.builtin.uri:
        url: "http://{{ hostname_mt }}:{{ item.port }}/metrics"
        return_content: yes
        status_code: 200
      loop:
        - { service: 'prometheus', port: "{{ prometheus_port }}" }
        - { service: 'node_exporter', port: "{{ node_exporter_port }}" }
        - { service: 'alertmanager', port: "{{ alertmanager_port }}" }
      register: monitoring_metrics_check
      ignore_errors: yes
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Verify zimbra_exporter port
      ansible.builtin.wait_for:
        port: "{{ zimbra_exporter_port }}"
        host: "{{ hostname_mail }}"
        timeout: 5
      register: zimbra_port_check
      ignore_errors: yes
      delegate_to: "{{ groups['zimbra'][0] }}"
      run_once: true

    - name: Check zimbra_exporter metrics
      ansible.builtin.uri:
        url: "http://{{ hostname_mail }}:{{ zimbra_exporter_port }}/metrics"
        return_content: yes
        status_code: 200
      register: zimbra_metrics_check
      ignore_errors: yes
      delegate_to: "{{ groups['zimbra'][0] }}"
      run_once: true

    - name: Check Prometheus status (monitoring only)
      command: systemctl is-active prometheus
      register: prometheus_status
      ignore_errors: yes
      changed_when: false
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Check Node Exporter status (monitoring only)
      command: systemctl is-active node_exporter
      register: node_exporter_status
      ignore_errors: yes
      changed_when: false
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Check Alertmanager status (monitoring only)
      command: systemctl is-active alertmanager
      register: alertmanager_status
      ignore_errors: yes
      changed_when: false
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Check Grafana status (monitoring only)
      command: systemctl is-active grafana-server
      register: grafana_status
      ignore_errors: yes
      changed_when: false
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Check Zimbra Exporter status (zimbra only)
      command: systemctl is-active zimbra_exporter
      register: zimbra_exporter_status
      ignore_errors: yes
      changed_when: false
      delegate_to: "{{ groups['zimbra'][0] }}"
      run_once: true

    - name: Compose monitoring services status
      set_fact:
        monitoring_status: |
          ==== MONITORING SERVICES STATUS ====
          Prometheus:      {{ hostvars[groups['monitoring'][0]].prometheus_status.stdout | default('UNKNOWN') }}
            - Port: {{ 'OPEN' if hostvars[groups['monitoring'][0]].monitoring_ports_check.results[0].state == 'started' else 'CLOSED' }}
            - Metrics: {{ 'AVAILABLE' if hostvars[groups['monitoring'][0]].monitoring_metrics_check.results[0].status == 200 else 'UNAVAILABLE' }}
            - URL: http://{{ hostname_mt }}:{{ prometheus_port }}/metrics
          
          Node Exporter:   {{ hostvars[groups['monitoring'][0]].node_exporter_status.stdout | default('UNKNOWN') }}
            - Port: {{ 'OPEN' if hostvars[groups['monitoring'][0]].monitoring_ports_check.results[1].state == 'started' else 'CLOSED' }}
            - Metrics: {{ 'AVAILABLE' if hostvars[groups['monitoring'][0]].monitoring_metrics_check.results[1].status == 200 else 'UNAVAILABLE' }}
            - URL: http://{{ hostname_mt }}:{{ node_exporter_port }}/metrics
          
          Alertmanager:    {{ hostvars[groups['monitoring'][0]].alertmanager_status.stdout | default('UNKNOWN') }}
            - Port: {{ 'OPEN' if hostvars[groups['monitoring'][0]].monitoring_ports_check.results[2].state == 'started' else 'CLOSED' }}
            - Metrics: {{ 'AVAILABLE' if hostvars[groups['monitoring'][0]].monitoring_metrics_check.results[2].status == 200 else 'UNAVAILABLE' }}
            - URL: http://{{ hostname_mt }}:{{ alertmanager_port }}/metrics
          
          Grafana:         {{ hostvars[groups['monitoring'][0]].grafana_status.stdout | default('UNKNOWN') }}
            - Port: {{ 'OPEN' if hostvars[groups['monitoring'][0]].monitoring_ports_check.results[3].state == 'started' else 'CLOSED' }}
            - URL: http://{{ hostname_mt }}:{{ grafana_port }}
      delegate_to: "{{ groups['monitoring'][0] }}"
      run_once: true

    - name: Compose mail services status
      set_fact:
        mail_status: |
          ==== MAIL SERVICES STATUS ====
          Zimbra Exporter: {{ hostvars[groups['zimbra'][0]].zimbra_exporter_status.stdout | default('UNKNOWN') }}
            - Port: {{ 'OPEN' if hostvars[groups['zimbra'][0]].zimbra_port_check.state == 'started' else 'CLOSED' }}
            - Metrics: {{ 'AVAILABLE' if hostvars[groups['zimbra'][0]].zimbra_metrics_check.status == 200 else 'UNAVAILABLE' }}
            - URL: http://{{ hostname_mail }}:{{ zimbra_exporter_port }}/metrics
      delegate_to: "{{ groups['zimbra'][0] }}"
      run_once: true

    - name: Display final status report
      debug:
        msg: |
          {{ monitoring_status }}
          {{ mail_status }}
      delegate_to: localhost
      run_once: true

    - name: Install stress-ng
      ansible.builtin.package:
        name: stress-ng
        state: present
      delegate_to: "{{ groups['monitoring'][0] }}"
      become: yes
      run_once: true
      when: stress_test_enabled | default(false)

    - name: Run CPU stress test (if enabled)
      ansible.builtin.command: stress-ng --cpu 4 --timeout 7m
      async: 420
      poll: 0
      delegate_to: "{{ groups['monitoring'][0] }}"
      become: yes
      run_once: true
      register: stress_test
      when: stress_test_enabled | default(false)

    - name: Show stress test info
      ansible.builtin.debug:
        msg: |
          CPU stress test started on {{ groups['monitoring'][0] }}
          Cores: 4
          Duration: 7 minutes
          PID: {{ stress_test.ansible_job_id }}
          To monitor: ssh {{ groups['monitoring'][0] }} "top -p {{ stress_test.ansible_job_id }}"
      delegate_to: localhost
      when: stress_test_enabled | default(false)